package com.patron.estructural.facade;
/**
 * üèõÔ∏è Facade Pattern 
 * ‚Äì Concepto Problema que resuelve: Oculta la complejidad de
 * un sistema grande ofreciendo una √∫nica interfaz de alto nivel.
 * 
 * Soluci√≥n: Introducir una clase "fachada" que agrupe y coordine las llamadas a
 * m√∫ltiples clases del sistema.
 * 
 * Aplicable cuando:
 * 
 * Hay un sistema complejo y necesitas simplificar su uso externo.
 * 
 * Quieres desacoplar el cliente del subsistema.
 * 
 * Est√°s construyendo APIs p√∫blicas o SDKs.
 * 
 * ‚úÖ Ventajas 
 * Oculta la complejidad del subsistema.
 * 
 * Reduce el acoplamiento entre cliente y clases internas.
 * 
 * Hace que el c√≥digo cliente sea m√°s limpio y f√°cil de mantener. 
 * 
 * ‚ö†Ô∏è Desventajas
 * Puede convertirse en una clase "Dios" si no se organiza bien.
 * 
 * Si se abusa de ella, puede ocultar detalles √∫tiles del subsistema.
 */
