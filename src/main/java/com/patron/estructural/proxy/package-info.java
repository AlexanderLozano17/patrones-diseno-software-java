package com.patron.estructural.proxy;
/**
 * El patr√≥n Proxy es un patr√≥n de dise√±o estructural que act√∫a como un
 * sustituto o intermediario de otro objeto para controlar el acceso a √©l. Se
 * usa cuando necesitas agregar l√≥gica adicional antes o despu√©s de acceder al
 * objeto real (por ejemplo, control de acceso, carga diferida o registro).
 *
 * 
 * üß† Proxy Pattern ‚Äì Concepto Problema que resuelve: 
 * Permite controlar el
 * acceso a un objeto sin cambiar su interfaz.
 * 
 * Soluci√≥n: Crear una clase proxy que implemente la misma interfaz que el
 * objeto real y contenga una referencia a √©l.
 * 
 * Aplicable cuando:
 * 
 * Quieres agregar l√≥gica sin modificar la clase original.
 * 
 * El objeto real es costoso de crear o acceder (carga diferida, lazy loading).
 * 
 * Necesitas seguridad, cache, logs, etc.
 * 
 * ‚úÖ Ventajas 
 * Controla el acceso al objeto real sin modificarlo.
 * 
 * Permite implementar lazy loading, autenticaci√≥n, cache, logging, etc.
 * 
 * Se puede usar para encapsular recursos costosos.
 * 
 * ‚ö†Ô∏è Desventajas 
 * Aumenta la complejidad y n√∫mero de clases.
 * 
 * Puede ocultar comportamientos que el cliente deber√≠a conocer.
 */
